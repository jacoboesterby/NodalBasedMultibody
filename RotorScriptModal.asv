clear all
%====== Control parameters ==========%
%Use full or CMS reduced structure
CMSRed = true;
VisMod = false;
%====================================%


%% Flexible Rotor

% Import full mass and stiffness matrix
%Read stiffness matrix
kfile = readmatrix('SoftBar_STIF1.txt');
mfile = readmatrix('SoftBar_MASS1.txt');
rows = max(kfile(:,1));
K = zeros(rows,rows);
M = zeros(rows,rows);
for i=1:length(kfile)
    row = kfile(i,1);
    col =kfile(i,2);
    K(row,col) = kfile(i,3);
end
for i=1:length(mfile)
    row = mfile(i,1);
    col = mfile(i,2);
    M(row,col) = mfile(i,3);
end



[Nodes,Elem] = readAbaInp('SoftBar.inp');


%% Craig bampton reduction
if CMSRed
    %Define "boundary nodes" as nodes on left end, right end and disc nodes
    %     Sb =
    %     Nodes(Nodes(:,4)<-0.21|Nodes(:,4)>0.21|(Nodes(:,4)>-0.012&Nodes(:,4)<0.01),:);%Applies for the rotor file
    
    
    Sb = Nodes(Nodes(:,4)<-0.4|Nodes(:,4) == 0 | Nodes(:,4) > 0.4,:);%Applies to the bar file
    SI = Nodes(setdiff(Nodes(:,1),Sb(:,1)),:);
    
    if VisMod
        figure
        subplot(1,2,1)
        plot3(Sb(:,2),Sb(:,3),Sb(:,4),'.','markersize',20,'color','green','displayname','Boundary nodes')
        hold on
        
        plot3(SI(:,2),SI(:,3),SI(:,4),'.','markersize',20,'color','blue','displayname','Internal nodes')
        xlabel('X');
        ylabel('Y');
        zlabel('Z');
        axis equal
        subplot(1,2,2)
        plot3(Nodes(:,2),Nodes(:,3),Nodes(:,4),'.','markersize',20)
        xlabel('X');
        ylabel('Y');
        zlabel('Z');
        axis equal
    end
    
    % [~,Phi] = eigs(K,M,10,'smallestabs');
    % fnat = sqrt(diag(Phi))./(2*pi);
    
    %Convert node sets to dofs
    SIdof = node2dof(SI(:,1));
    Sbdof = node2dof(Sb(:,1));
    % Boundary condition on interface dofs
    %Not needed when boundary nodes do not serve as interface between two
    %reduces structures
    %     for i=1:length(Sbdof)
    %         K(Sbdof(i),:) = 0;
    %         K(:,Sbdof(i)) = 0;
    %         K(Sbdof(i),Sbdof(i)) = 1;
    %     end
    
    %Calculate static condensation of internal dofs
    Psi1 = -K(SIdof,SIdof)\K(SIdof,Sbdof);
    %     [temp1,~] = eigs(K(S1dof,S1dof),M(S1dof,S1dof),40,'smallestabs');
    
    %Proportional damping (Later build modal damping matrix!)
    fprintf('Create modal damping matrix instead of proportional!\n')
    C = (1e-4.*M  + 1e-4.*K).*0;

    
    %Construct sub-matrices KBB, KII, KBI, KIB, MBB, MII, MBI, MIB
    KBB = K(Sbdof,Sbdof);
    KII = K(SIdof,SIdof);
    KBI = K(Sbdof,SIdof);
    KIB = K(SIdof,Sbdof);
    
    MBB = M(Sbdof,Sbdof);
    MII = M(SIdof,SIdof);
    MBI = M(Sbdof,SIdof);
    MIB = M(SIdof,Sbdof);
    
    CBB = C(Sbdof,Sbdof);
    CII = C(SIdof,SIdof);
    CBI = C(Sbdof,SIdof);
    CIB = C(SIdof,Sbdof);
    
    %When there are boundary dofs, there are no rigid body modes that
    %should be treated separately
    %Calculate dynamic modes
    dynmodes = 20;
    [XI,Lambda] = eigs(KII,MII,dynmodes,'smallestabs');
    %Calculate mode shape normalization matrix
    
    %Calculate mass normalized mode shapes
    mr = transpose(XI)*MII*XI;
    XIbar = XI*mr^(-1/2);
    
    %Construct reduction matrix
    Psi = [eye(length(Sbdof),length(Sbdof)),zeros(length(Sbdof),size(XIbar,2));
        -KII^(-1)*KIB, XIbar];
    
    %Rearrange (R for rearranged) matrices to follow reduction scheme (x = [X_b;X_I])
    KR = [KBB,KBI;
          KIB,KII];
    
    MR = [MBB,MBI;
          MIB,MII];
      
    CR = [CBB,CBI;
          CIB,CII];
    
    %Build reduced matrices using transformation matrix
    Ktilde = transpose(Psi)*KR*Psi;
    Mtilde = transpose(Psi)*MR*Psi;
    Ctilde = transpose(Psi)*CR*Psi;
    
    %Calculate second eigenvalue problem
    [Phi,Lambda] = eig(Ktilde,Mtilde);
    %ascending order
    [Lam,order] = sort(diag(Lambda));
    Phi = Phi(:,order);
    %Discard rigid body modes
    Phi= Phi(:,7:end);
    %"Mass" normalize
    mr = transpose(Phi)*(Psi.'*M*Psi)*Phi;
    Phibar = Phi*mr^(-1/2);
    %Construct final reduction matrix
    Psi = Psi*Phibar;
    
    
    %Build matrix using (6.184 in Rixen)
    
    KBBtilde = KBB-KBI*KII^(-1)*KIB;
    MBBtilde = MBB-MBI*KII^(-1)*KIB-KBI*KII^(-1)*MIB+KBI*KII^(-1)*MII*KII^(-1)*KIB;
    MBtilde = transpose(XIbar)*(MIB-MII*KII^(-1)*KIB);
    
    
    Ktilde1 = [KBBtilde,zeros(length(Sbdof),size(Lambda,2));
        zeros(size(Lambda,1),length(Sbdof)),Lambda];
    Mtilde1 = [MBBtilde,MBtilde.';
        MBtilde,eye(size(MBtilde,1),size(MBtilde,1))];
    

    
    %Both methods are equivalent!
    %Create reduction matrix Psi from n modes excluding rigid body modes
    %     [Psi,Lambda] = eigs(K,M,10,'smallestabs');
    %     Psi = Psi(:,7:end);
    %Create dof- and node map to convert between reduced set and full set
    [~,nodeG2R] = sort([Sb(:,1);SI(:,1)]);
    [~,dofG2R]  = sort([Sbdof;SIdof]);
    % Create map between global and rearranged set
    [~,nodeR2G] = sort(nodeG2R);
    [~,dofR2G]  = sort(dofG2R);
end
%%

% Build rbm to flex dofs transforamtion matrix Phi_t. Eq (12)
Phit = repmat(eye(3,3),[size(Nodes,1),1]);
%Build block diagonal identity matrix Ibd
Ibd = eye(3*size(Nodes,1));


% Create vector containing dof reference position (Constant)
%Rearrange nodes to contain same order as the CB reduced set
NodesR         = Nodes(nodeR2G,:);
xbar           = zeros(3*size(Nodes,1),1);
xbarR          = zeros(3*size(Nodes,1),1);

%Original set
xbar(1:3:end)  = Nodes(:,2); %x-positions
xbar(2:3:end)  = Nodes(:,3); %y-positions
xbar(3:3:end)  = Nodes(:,4); %z-positions
%Rearranged set
xbarR(1:3:end) = NodesR(:,2);
xbarR(2:3:end) = NodesR(:,3);
xbarR(3:3:end) = NodesR(:,4);

%Build constant "Inertial like" matrices and constants
M_Psi_Psi            = Psi.'*MR*Psi;
M_Psitilde_Psi       = skew_symmetric(Psi).'*MR*Psi;
M_Psitilde_Psitilde  = skew_symmetric(Psi).'*MR*skew_symmetric(Psi);
M_Phi_Psi            = Phit.'*MR*Psi;
M_Phi_Psitilde       = Phit.'*MR*skew_symmetric(Psi);
M_xbartilde_Psi      = skew_symmetric(xbarR).'*MR*Psi;
M_xbartilde_Psitilde = skew_symmetric(xbarR).'*MR*skew_symmetric(Psi);
Mtt                  = Phit.'*MR*Phit;
chibar               = 1/Mtt(1)*Phit.'*MR*xbarR;
chibar_tilde         = skew_symmetric(chibar);
Theta_u              = skew_symmetric(xbarR).'*MR*skew_symmetric(xbarR);

%Newmark integration scheme
tend  = 10.0;
nstep = 3000;
h     = tend/nstep;
gamma = 1/2;
beta  = 1/4;


%Allocate time history deformation matrix
cdd = zeros(6+size(Psi,2),nstep);
cd  = zeros(6+size(Psi,2),nstep);
c    = zeros(6+size(Psi,2),nstep);
cf   = zeros(size(Psi,2),nstep);

%Initial parameters

r0           = [0,0,0].';
% p0           = [cos(0),0,0,sin(0)].'; %Euler parameters
phi0         = [0,0,0].';
omega_bar0   = [0,0,10].';
%Convert angulat velocity to bryant angle derivatives
phi_dot0     = omega2phi_dot(phi0)*omega_bar0;
rd0          = [0,0,0].'; %No initial velocity
eta0         = Psi\zeros(size(M,2),1); %No initial deformation
eta_dot0     = Psi\zeros(size(M,2),1); %No initial deformation velocity
c(:,1)       = [r0;phi0;eta0];
cd(:,1) = [rd0;phi_dot0;eta_dot0];

% Apply gravitational pull
Fgrav = zeros(size(K,1),1);
% grav = zeros(size(M,1),1);
% grav(2:3:end) = -9.82;
% FF = M*grav;
%Read gravity nodal force from file (To avoid needing to do integration)
forceFile = readmatrix('SoftBar_LOAD1.txt');%(This containes nodal indices and their respective force)
Fgrav(forceFile(:,1)) = forceFile(:,2);
% F = zeros(length(xbar),1);
FR = Fgrav(dofR2G); %Rearranged global force vector
%Add initial force
% F(50*3-1) = -100;

%Build constant global stiffness and damping matrics
Khat = buildGlobalC(KR,Psi);
Chat = buildGlobalC(CR,Psi);

%Build initial step arrays
Mhat = buildModalM(Mtt,phi0,eta0,M_Psi_Psi, M_Psitilde_Psi, M_Psitilde_Psitilde, M_Phi_Psi, M_Phi_Psitilde, M_xbartilde_Psi, M_xbartilde_Psitilde, chibar_tilde,Theta_u);
Qv = buildModalQuadVel(Mtt,phi0,phi_dot0,eta0,eta_dot0, M_Psi_Psi, M_Psitilde_Psi, M_Psitilde_Psitilde, M_Phi_Psi, M_Phi_Psitilde, M_xbartilde_Psi, M_xbartilde_Psitilde,chibar_tilde,Theta_u);
Qa = buildModalForce(phi0,Psi,xbarR,eta0,FR);
% [Mhat,Chat,Khat,Qv,Qa] = buildEOMModal(MR,CR,KR,Psi,phi0,phi_dot0,xbarR,eta0,eta_dot0,FR);


%Calculate initial acceleration
cdd(:,1) = Mhat\(Qv+Qa - Chat*cd(:,1)-Khat*c(:,1));
k1 = 5e6;
k2 = 5e6;

[Amat,Gmat] = TransformMat(c(4:6,1));

omega_hist = zeros(3,nstep);
omega_hist(:,1) = Gmat*phi_dot0;

%Attach springs to nodes 65 and 35
%Global positions of springs
rsp11 = [-0.1;0;-0.5];
rsp12 = [0.1;0;-0.5];
rsp21 = [-0.1;0;0.5];
rsp22 = [0.1;0;0.5];
nodeEnd11 = 32;
nodeEnd12 = 98;
nodeEnd21 = 2;
nodeEnd22 = 68;

%Nodes
rsp1 = [0;0;-0.5];
rsp2 = [0;0;0.5];
nodeEnd1 = 65;
nodeEnd2 = 35;
nodeMid = 50;


t = zeros(nstep+1,1);


disp('Starting integration ...')
prog = 0;
eps = 1e-6;
errTol = 1e-6;
for i=1:nstep
    t(i+1) = i*h;
    
    % Predictor step
    cs = c(:,i)+h*cd(:,i)+(1/2-beta)*h^2.*cdd(:,i);
    cds = cd(:,i)+(1-gamma)*h.*cdd(:,i);
    %Set next iteration accelerations to zero (To be determined by
    %residuals)
    cdd(:,i+1) = 0;
    
    %Extract flexible parts
    cfsbarR = Psi*cs(7:end);
    
    %Calculate transformation matrix from prediction
    [A,G] = TransformMat(cs(4:6));
    %Calculate forces from predictor step
    FR = Fgrav(dofR2G);
    FR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)) = FR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)) + Spring(rsp1,cs(1:3),cs(4:6),xbarR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)),cfsbarR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)),k1);
    FR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)) = FR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)) + Spring(rsp2,cs(1:3),cs(4:6),xbarR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)),cfsbarR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)),k2);
    
    %Build system of equations
 
%     [Mhat,Chat,Khat,Qv,Qa] = buildEOMModal(MR,CR,KR,Psi,cd(4:6),cds(4:6),xbarR,cs(7:end),cds(7:end),FR);
    Mhat = buildModalM(Mtt,cs(4:6),cs(7:end),M_Psi_Psi, M_Psitilde_Psi, M_Psitilde_Psitilde, M_Phi_Psi, M_Phi_Psitilde, M_xbartilde_Psi, M_xbartilde_Psitilde, chibar_tilde,Theta_u);
    Qv = buildModalQuadVel(Mtt,cs(4:6),cds(4:6),cs(7:end),cds(7:end), M_Psi_Psi, M_Psitilde_Psi, M_Psitilde_Psitilde, M_Phi_Psi, M_Phi_Psitilde, M_xbartilde_Psi, M_xbartilde_Psitilde,chibar_tilde,Theta_u);
    Qa = buildModalForce(cs(4:6),Psi,xbarR,cs(7:end),FR);
    %Calculate residual from predictor step
    res = Mhat*cdd(:,i+1) + Chat*cds + Khat*cs -(Qa+Qv);
    
    f = Chat*cds + Khat*cs - (Qa+Qv);
    err = max(abs(res));
    
    k = 1;
    
    %Initialize Newton iterations using relative and absolute tolerances
    while (norm(res)>eps*norm(f))||(err>errTol)
        S = Mhat + h*gamma*Chat + h^2*beta*Khat;
        
        dcdd       = S\(-res);
        %Update step
        cs         = cs + beta*h^2*dcdd;
        cds        = cds + gamma*h*dcdd;
        cdd(:,i+1) = cdd(:,i+1) + dcdd;
        
        %Extract flexible part (To be used with mapping)
        cfsbarR = Psi*cs(7:end);
        
        %Build global forces after update
        FR = Fgrav(dofR2G);
        FR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)) = FR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)) + Spring(rsp1,cs(1:3),cs(4:6),xbarR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)),cfsbarR(dofG2R(nodeEnd1*3-2:nodeEnd1*3)),k1);
        FR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)) = FR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)) + Spring(rsp2,cs(1:3),cs(4:6),xbarR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)),cfsbarR(dofG2R(nodeEnd2*3-2:nodeEnd2*3)),k2);
%         [Mhat,Chat,Khat,Qv,Qa] = buildEOMModal(MR,CR,KR,Psi,cd(4:6),cds(4:6),xbarR,cs(7:end),cds(7:end),FR);
        Mhat = buildModalM(Mtt,cs(4:6),cs(7:end),M_Psi_Psi, M_Psitilde_Psi, M_Psitilde_Psitilde, M_Phi_Psi, M_Phi_Psitilde, M_xbartilde_Psi, M_xbartilde_Psitilde, chibar_tilde,Theta_u);
        Qv = buildModalQuadVel(Mtt,cs(4:6),cds(4:6),cs(7:end),cds(7:end), M_Psi_Psi, M_Psitilde_Psi, M_Psitilde_Psitilde, M_Phi_Psi, M_Phi_Psitilde, M_xbartilde_Psi, M_xbartilde_Psitilde,chibar_tilde,Theta_u);
        Qa = buildModalForce(cs(4:6),Psi,xbarR,cs(7:end),FR);
        
        %Calculate residuals in Newton loop
        res = Mhat*cdd(:,i+1) + Chat*cds + Khat*cs - (Qa+Qv);
        f   = Chat*cds + Khat*cs - (Qa+Qv);
        err = max(abs(res));
        k   = k + 1;
    end
    
    %Update history data after convergence
    c(:,i+1)  = cs;
    cd(:,i+1) = cds;

    [Amat,Gmat] = TransformMat(c(4:6,i+1));
    omega_hist(:,i+1) = Gmat*cd(4:6,i+1);
    
    %Write progess
    if (i/nstep*100-10>=prog)
        prog = i/nstep*100;
        fprintf("Progess: %.1f%%\n",prog)
    end
    
end
fprintf("Reconstructing full solution . . .\n")
writeTimeSeriesModal(Nodes,xbar,c,t,Psi,dofG2R);
fprintf("Done!\n")

